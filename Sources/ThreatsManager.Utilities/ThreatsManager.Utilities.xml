<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ThreatsManager.Utilities</name>
    </assembly>
    <members>
        <member name="T:ThreatsManager.Utilities.ActionDefinition">
            <summary>
            Definition of an Action.
            </summary>
            <remarks>The class represents a typical implementation, which can be used as a reference.</remarks>
        </member>
        <member name="M:ThreatsManager.Utilities.ActionDefinition.#ctor(System.Guid,System.String,System.String,System.Drawing.Bitmap,System.Drawing.Bitmap,System.Boolean,ThreatsManager.Interfaces.Extensions.Shortcut,System.String)">
            <summary>
            Class constructor.
            </summary>
            <param name="id">Identifier of the owner of the action.</param>
            <param name="name">Name of the action.</param>
            <param name="label">Label to be used to describe the action.</param>
            <param name="icon">Icon of the action.</param>
            <param name="smallIcon">Small image of the action.</param>
            <param name="enabled">Inital status for the action.</param>
            <param name="shortcut">Shortcut for the action.</param>
            <param name="tooltip">Tooltip for the action.</param>
        </member>
        <member name="P:ThreatsManager.Utilities.ActionDefinition.Id">
            <summary>
            Identifier of the owner of the action.
            </summary>
        </member>
        <member name="P:ThreatsManager.Utilities.ActionDefinition.Name">
            <summary>
            Name of the action.
            </summary>
            <remarks>This is an internal, logical name.</remarks>
        </member>
        <member name="P:ThreatsManager.Utilities.ActionDefinition.Label">
            <summary>
            Label to be used to describe the action.
            </summary>
        </member>
        <member name="P:ThreatsManager.Utilities.ActionDefinition.Icon">
            <summary>
            Icon of the action.
            </summary>
            <remarks>It must be a 64x64 pixels image.</remarks>
        </member>
        <member name="P:ThreatsManager.Utilities.ActionDefinition.SmallIcon">
            <summary>
            Small image of the action.
            </summary>
            <remarks>It must be a 32x32 image.</remarks>
        </member>
        <member name="P:ThreatsManager.Utilities.ActionDefinition.Enabled">
            <summary>
            Inital status for the action.
            </summary>
        </member>
        <member name="P:ThreatsManager.Utilities.ActionDefinition.Shortcut">
            <summary>
            Shortcut for the action.
            </summary>
        </member>
        <member name="P:ThreatsManager.Utilities.ActionDefinition.Tooltip">
            <summary>
            Tooltip for the action.
            </summary>
        </member>
        <member name="P:ThreatsManager.Utilities.ActionDefinition.Tag">
            <summary>
            Associated object.
            </summary>
            <remarks>It may be used to add other information to allow execution of the action.</remarks>
        </member>
        <member name="T:ThreatsManager.Utilities.Aspects.AutoDirtyAttribute">
            <summary>
            Attribute applied to automatically change the status of IDirty objects to Dirty when a Property is set.
            </summary>
            <remarks>PostSharp is required to make this attribute effective.
            <para>If PostSharp is not used, then the same result may be achieved by specifying
            <example>IsDirty = true</example> in the interested object.</para></remarks>
        </member>
        <member name="M:ThreatsManager.Utilities.Aspects.AutoDirtyAttribute.OnPropertySet(PostSharp.Aspects.LocationInterceptionArgs)">
            <summary>
            Logic to be executed when the Property is Set.
            </summary>
            <param name="args">Parameters of the interception.</param>
        </member>
        <member name="T:ThreatsManager.Utilities.Aspects.AutoDirtyIgnoreAttribute">
            <summary>
            Attribute to be used to decorate Properties that must not be considered by AutoDirty.
            </summary>
        </member>
        <member name="M:ThreatsManager.Utilities.Aspects.AutoDirtyIgnoreAttribute.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="T:ThreatsManager.Utilities.Aspects.Engine.AssociatedPropertyClassAttribute">
            <summary>
            Enumeration used to identify the associated Property object. It is used by Property Types.
            </summary>
        </member>
        <member name="M:ThreatsManager.Utilities.Aspects.Engine.AssociatedPropertyClassAttribute.#ctor(System.String)">
            <summary>
            Public constructor.
            </summary>
            <param name="type">Type name of the associated Property Class.</param>
        </member>
        <member name="P:ThreatsManager.Utilities.Aspects.Engine.AssociatedPropertyClassAttribute.AssociatedType">
            <summary>
            Associated Property class type name.
            </summary>
        </member>
        <member name="T:ThreatsManager.Utilities.Aspects.Engine.DirtyAspect">
            <summary>
            Attribute applied to automatically inject the code needed by classes implementing IDirty and being contained within the Threat Model.
            </summary>
            <remarks>PostSharp is required to make this attribute effective.</remarks>
        </member>
        <member name="E:ThreatsManager.Utilities.Aspects.Engine.DirtyAspect.DirtyChanged">
            <summary>
            Event raised when the Dirty status changes.
            </summary>
            <remarks>Returns the new status.</remarks>
        </member>
        <member name="P:ThreatsManager.Utilities.Aspects.Engine.DirtyAspect.IsDirty">
            <summary>
            Property to get or set the Dirty status.
            </summary>
        </member>
        <member name="M:ThreatsManager.Utilities.Aspects.Engine.DirtyAspect.SetDirty">
            <summary>
            Set the object as Dirty, if it is not already.
            </summary>
            <remarks>If the object is contained, the container will be set as Dirty as well.</remarks>
        </member>
        <member name="M:ThreatsManager.Utilities.Aspects.Engine.DirtyAspect.ResetDirty">
            <summary>
            Reset the Dirty status, if it is set.
            </summary>
            <remarks>If the object is a container, the contained objects will be reset as well.</remarks>
        </member>
        <member name="P:ThreatsManager.Utilities.Aspects.Engine.DirtyAspect.IsDirtySuspended">
            <summary>
            Dirty has been suspended.
            </summary>
        </member>
        <member name="M:ThreatsManager.Utilities.Aspects.Engine.DirtyAspect.SuspendDirty">
            <summary>
            Suspends Dirty tracking.
            </summary>
        </member>
        <member name="M:ThreatsManager.Utilities.Aspects.Engine.DirtyAspect.ResumeDirty">
            <summary>
            Resume Dirty tracking.
            </summary>
        </member>
        <member name="T:ThreatsManager.Utilities.Aspects.Engine.IdentityAspect">
            <summary>
            Attribute applied to automatically inject the code needed by classes implementing IIdentity.
            </summary>
            <remarks>PostSharp is required to make this attribute effective.</remarks>
        </member>
        <member name="T:ThreatsManager.Utilities.AssessmentOutcome">
            <summary>
            Outcomes of the Assessment.
            </summary>
        </member>
        <member name="F:ThreatsManager.Utilities.AssessmentOutcome.Good">
            <summary>
            Good health.
            </summary>
        </member>
        <member name="F:ThreatsManager.Utilities.AssessmentOutcome.Weak">
            <summary>
            Weak health.
            </summary>
        </member>
        <member name="F:ThreatsManager.Utilities.AssessmentOutcome.Poor">
            <summary>
            Poor health.
            </summary>
        </member>
        <member name="T:ThreatsManager.Utilities.CloningExtensions">
            <summary>
            Extensions used for cloning parts of the Threat Model.
            </summary>
        </member>
        <member name="M:ThreatsManager.Utilities.CloningExtensions.CloneProperties(ThreatsManager.Interfaces.ObjectModel.Properties.IPropertiesContainer,ThreatsManager.Interfaces.ObjectModel.Properties.IPropertiesContainer)">
            <summary>
            Clone Properties between Containers.
            </summary>
            <param name="source">Source Container.</param>
            <param name="target">Target Container.</param>
        </member>
        <member name="M:ThreatsManager.Utilities.CloningExtensions.CloneThreatEvents(ThreatsManager.Interfaces.ObjectModel.ThreatsMitigations.IThreatEventsContainer,ThreatsManager.Interfaces.ObjectModel.ThreatsMitigations.IThreatEventsContainer)">
            <summary>
            Clone Threat Events between Containers.
            </summary>
            <param name="source">Source Container.</param>
            <param name="target">Target Container.</param>
        </member>
        <member name="M:ThreatsManager.Utilities.CloningExtensions.ClonePropertyTypes(ThreatsManager.Interfaces.ObjectModel.Properties.IPropertyTypesContainer,ThreatsManager.Interfaces.ObjectModel.Properties.IPropertyTypesContainer)">
            <summary>
            Clone Property Types between Containers.
            </summary>
            <param name="source">Source Container.</param>
            <param name="target">Target Container.</param>
        </member>
        <member name="M:ThreatsManager.Utilities.CloningExtensions.MergePropertyTypes(ThreatsManager.Interfaces.ObjectModel.Properties.IPropertyTypesContainer,ThreatsManager.Interfaces.ObjectModel.Properties.IPropertyTypesContainer)">
            <summary>
            Merge Property Types between Containers.
            </summary>
            <param name="target">Target Container.</param>
            <param name="source">Source Container.</param>
        </member>
        <member name="M:ThreatsManager.Utilities.CloningExtensions.MergeProperties(ThreatsManager.Interfaces.ObjectModel.Properties.IPropertiesContainer,ThreatsManager.Interfaces.ObjectModel.Properties.IPropertiesContainer)">
            <summary>
            Clone Properties between Containers.
            </summary>
            <param name="target">Target Container.</param>
            <param name="source">Source Container.</param>
        </member>
        <member name="T:ThreatsManager.Utilities.Exceptions.ReadOnlyPropertyException">
            <summary>
            Exception to be raised when someone tries to write a Locked Property.
            </summary>
        </member>
        <member name="M:ThreatsManager.Utilities.Exceptions.ReadOnlyPropertyException.#ctor(System.String)">
            <summary>
            Public Constructor.
            </summary>
        </member>
        <member name="T:ThreatsManager.Utilities.ExtensionUtils">
            <summary>
            Utilities to be used to simplify working with Extensions.
            </summary>
        </member>
        <member name="M:ThreatsManager.Utilities.ExtensionUtils.GetExtensionId(System.Object)">
            <summary>
            Get the Extension Identifier.
            </summary>
            <param name="value">Extension whose identifier is to be returned.</param>
            <returns>Identifier of the Extension.</returns>
            <remarks>If the object is not an Extension, then the method returns null.</remarks>
        </member>
        <member name="M:ThreatsManager.Utilities.ExtensionUtils.GetExtensionLabel(System.Object)">
            <summary>
            Get the Extension Label.
            </summary>
            <param name="value">Extension whose Label is to be returned.</param>
            <returns>Label of the Extension.</returns>
            <remarks>If the object is not an Extension, then the method returns null.</remarks>
        </member>
        <member name="M:ThreatsManager.Utilities.ExtensionUtils.GetExtensionAssemblyTitle(System.Object)">
            <summary>
            Get the Title of the Assembly containing the Extension.
            </summary>
            <param name="value">Reference extension.</param>
            <returns>Title of the containing Assembly.</returns>
            <remarks>This method can be used for all classes, not only for Extensions.</remarks>
        </member>
        <member name="M:ThreatsManager.Utilities.ExtensionUtils.GetExtensions``1">
            <summary>
            Gets all the Extensions of a specific type loaded by the Platform. 
            </summary>
            <typeparam name="T">Extension type.</typeparam>
            <returns>List of registered Extensions.</returns>
        </member>
        <member name="M:ThreatsManager.Utilities.ExtensionUtils.GetExtension``1(System.String)">
            <summary>
            Gets all the Extensions of a specific type loaded by the Platform. 
            </summary>
            <typeparam name="T">Extension type.</typeparam>
            <param name="extensionId">Identifier of the Extension.</param>
            <returns>List of registered Extensions.</returns>
        </member>
        <member name="T:ThreatsManager.Utilities.ImageExtensions">
            <summary>
            Image Extensions.
            </summary>
        </member>
        <member name="M:ThreatsManager.Utilities.ImageExtensions.GetImage(ThreatsManager.Interfaces.ObjectModel.IIdentity,ThreatsManager.Interfaces.ImageSize)">
            <summary>
            Obtains the image related to the Identity passed as argument.
            </summary>
            <param name = "identity" > Identity for which the image should be determined.</param>
            <param name = "size" > Size of the image.</param>
            <returns>Requested image.</returns>
        </member>
        <member name="M:ThreatsManager.Utilities.ImageExtensions.GetEntityImage(ThreatsManager.Interfaces.ObjectModel.Entities.EntityType,ThreatsManager.Interfaces.ImageSize)">
            <summary>
            Get the standard image for the Entity given its type.
            </summary>
            <param name="entityType">Type of Entity.</param>
            <param name="size">Size of the Image.</param>
            <returns>Requested image.</returns>
        </member>
        <member name="T:ThreatsManager.Utilities.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:ThreatsManager.Utilities.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:ThreatsManager.Utilities.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:ThreatsManager.Utilities.Properties.Resources.ThreatModelTemplateFile">
            <summary>
              Looks up a localized string similar to threatmodeltemplate.json.
            </summary>
        </member>
        <member name="T:ThreatsManager.Utilities.QualityAnalyzerResult">
            <summary>
            Result from a Quality Analyzer.
            </summary>
        </member>
        <member name="P:ThreatsManager.Utilities.QualityAnalyzerResult.Id">
            <summary>
            ID of the Quality Analyzer.
            </summary>
        </member>
        <member name="P:ThreatsManager.Utilities.QualityAnalyzerResult.Value">
            <summary>
            Value calculated by the Quality Analyzer.
            </summary>
        </member>
        <member name="P:ThreatsManager.Utilities.QualityAnalyzerResult.OkByDefinition">
            <summary>
            Flag that is shown if the execution must be considered ok by definition,
            because there are no elements that may be analyzed.
            </summary>
        </member>
        <member name="P:ThreatsManager.Utilities.QualityAnalyzerResult.Health">
            <summary>
            Health of the Analysis.
            </summary>
        </member>
        <member name="P:ThreatsManager.Utilities.QualityAnalyzerResult.Findings">
            <summary>
            List of elements that need to be addressed.
            </summary>
        </member>
        <member name="P:ThreatsManager.Utilities.QualityAnalyzerResult.MinRed">
            <summary>
            Minimum Red.
            </summary>
        </member>
        <member name="P:ThreatsManager.Utilities.QualityAnalyzerResult.MaxRed">
            <summary>
            Maximum Red.
            </summary>
        </member>
        <member name="P:ThreatsManager.Utilities.QualityAnalyzerResult.MinYellow">
            <summary>
            Minimum Yellow.
            </summary>
        </member>
        <member name="P:ThreatsManager.Utilities.QualityAnalyzerResult.MaxYellow">
            <summary>
            Maximum Yellow.
            </summary>
        </member>
        <member name="P:ThreatsManager.Utilities.QualityAnalyzerResult.MinGreen">
            <summary>
            Minimum Green.
            </summary>
        </member>
        <member name="P:ThreatsManager.Utilities.QualityAnalyzerResult.MaxGreen">
            <summary>
            Maximum Green.
            </summary>
        </member>
        <member name="P:ThreatsManager.Utilities.QualityAnalyzerResult.Assessment">
            <summary>
            Assessment of the Health in textual form.
            </summary>
        </member>
        <member name="T:ThreatsManager.Utilities.QualityAnalyzersManager">
            <summary>
            Utility class to perform quality analysis of Threat Models.
            </summary>
        </member>
        <member name="P:ThreatsManager.Utilities.QualityAnalyzersManager.QualityAnalyzers">
            <summary>
            Get the list of configured Quality Analyzers.
            </summary>
        </member>
        <member name="M:ThreatsManager.Utilities.QualityAnalyzersManager.Analyze(ThreatsManager.Interfaces.ObjectModel.IThreatModel,System.Func{ThreatsManager.Interfaces.Extensions.IQualityAnalyzer,ThreatsManager.Interfaces.ObjectModel.Properties.IPropertiesContainer,System.Boolean},System.Collections.Generic.IEnumerable{ThreatsManager.Utilities.QualityAnalyzerResult}@)">
            <summary>
            Calculate the Normalized Threat Model Health Index.
            </summary>
            <param name="model">Model to be analyzed.</param>
            <param name="isFalsePositive">Function that evaluates an object to decide if it has already been marked as a False Positive.</param>
            <param name="outcomes">Health of the analysis.</param>
            <returns>Normalized Threat Model Health Index.</returns>
            <remarks>For the normalized 30 represents perfect health.</remarks>
        </member>
        <member name="M:ThreatsManager.Utilities.QualityAnalyzersManager.GetHealthIndexDescription(System.Double)">
            <summary>
            Calculates the de
            </summary>
            <param name="healthIndex"></param>
            <returns></returns>
        </member>
        <member name="T:ThreatsManager.Utilities.TemplateManager">
            <summary>
            Template Manager.
            </summary>
            <remarks>Utility class to manage serialization and deserialization of Threat Model templates.</remarks>
        </member>
        <member name="M:ThreatsManager.Utilities.TemplateManager.SaveTemplate(ThreatsManager.Interfaces.ObjectModel.IThreatModel,ThreatsManager.Interfaces.ObjectModel.DuplicationDefinition,System.String,System.String,System.String)">
            <summary>
            Save the Threat Model passed as argument as Template.
            </summary>
            <param name="model">Threat Model to be saved as Template.</param>
            <param name="definition">Definition of the information to export.</param>
            <param name="name">Name of the Template.</param>
            <param name="description">Description of the Template.</param>
            <param name="path">Path to the Template to be created.</param>
        </member>
        <member name="M:ThreatsManager.Utilities.TemplateManager.OpenTemplate(System.String)">
            <summary>
            Open an existing Template.
            </summary>
            <param name="path">Location of the Template, in the file system.</param>
            <returns>The Threat Model representing the Template.</returns>
        </member>
        <member name="M:ThreatsManager.Utilities.TemplateManager.CloseTemplate(System.Guid)">
            <summary>
            Close a Template that has been opened.
            </summary>
            <param name="id">Identifier of the Template to be closed.</param>
        </member>
        <member name="T:ThreatsManager.Utilities.ThreatModelExtensions">
            <summary>
            Extensions to simplify development by adding behaviors to the Threat Model and its components.
            </summary>
        </member>
        <member name="M:ThreatsManager.Utilities.ThreatModelExtensions.GetTopSeverity(ThreatsManager.Interfaces.ObjectModel.ThreatsMitigations.IThreatType)">
            <summary>
            Get the maximum severity applied to the Threat Events derived from the specific Threat Type.
            </summary>
            <param name="threatType">Threat Type to be analyzed.</param>
            <returns>Maximum severity applied to Threat Events derived from the Threat Type.</returns>
        </member>
        <member name="M:ThreatsManager.Utilities.ThreatModelExtensions.Filter(ThreatsManager.Interfaces.ObjectModel.IIdentity,System.String)">
            <summary>
            Verifies if the Identity should be picked, based on the filter passed as argument.
            </summary>
            <param name="identity">Identity to be analyzed.</param>
            <param name="filter">Filter to be applied.</param>
            <returns>True if any string in the filter is present in any text field of teh Identity.</returns>
            <remarks>It analyzes the Name, the Description and eventual Text properties.
            <para>The search is case-insensitive.</para></remarks>
        </member>
        <member name="M:ThreatsManager.Utilities.ThreatModelExtensions.GetEntityType(ThreatsManager.Interfaces.ObjectModel.Entities.IEntity)">
            <summary>
            Get the type of the Entity passed as argument.
            </summary>
            <param name="entity">Entity for which the Type should be retrieved.</param>
            <returns>Entity Type.</returns>
        </member>
        <member name="M:ThreatsManager.Utilities.ThreatModelExtensions.GetThreatEventMitigations(ThreatsManager.Interfaces.ObjectModel.ThreatsMitigations.IMitigation)">
            <summary>
            Get the associations between Threat Events and the Mitigation passed as argument. 
            </summary>
            <param name="mitigation">Mitigation to be analyzed.</param>
            <returns>Enumeration of all the relationships.</returns>
        </member>
        <member name="T:ThreatsManager.Utilities.ThreatModelManager">
            <summary>
            Threat Model Manager.
            </summary>
            <remarks>Utility class to manage serialization and deserialization of Threat Models, instances and model locations.</remarks>
        </member>
        <member name="F:ThreatsManager.Utilities.ThreatModelManager.StandardColor">
            <summary>
            Standard color used for everything is "good", like Mitigations.
            </summary>
        </member>
        <member name="F:ThreatsManager.Utilities.ThreatModelManager.ThreatsColor">
            <summary>
            Color used for everything is "bad", like Threats and Threat Actors.
            </summary>
        </member>
        <member name="M:ThreatsManager.Utilities.ThreatModelManager.GetDefaultInstance">
            <summary>
            Creates a new Default Instance of the Threat Model.
            </summary>
            <returns>Threat Model created.</returns>
        </member>
        <member name="M:ThreatsManager.Utilities.ThreatModelManager.Get(System.Guid)">
            <summary>
            Get the Threat Model whose ID is passed as argument from the list of known Threat Models.
            </summary>
            <param name="id">Identifier of the Threat Model.</param>
            <returns>Instance of the Threat Model, having the specified ID.
            If a Threat Model with the searched ID does not exist, the method returns <code>null</code>.</returns>
        </member>
        <member name="M:ThreatsManager.Utilities.ThreatModelManager.Remove(System.Guid)">
            <summary>
            Removes a Threat Model from the list of known Threat Models.
            </summary>
            <param name="id">Identifier of the Threat Model.</param>
            <returns>True if the Threat Model has been found and removed, otherwise false.</returns>
        </member>
        <member name="M:ThreatsManager.Utilities.ThreatModelManager.Deserialize(System.Byte[],System.Boolean,System.Nullable{System.Guid})">
            <summary>
            Deserialize a Threat Model and adds it to the list of known Threat Models.
            </summary>
            <param name="json">Serialized Json of the Threat Model, as byte array.</param>
            <param name="ignoreMissingMembers">Optional flag to specify to ignore information that is unknown.</param>
            <param name="newThreatModelId">Optional identifier to be used for the Threat Model replacing its configured one.</param>
            <returns>The deserialized Threat Model.</returns>
        </member>
        <member name="M:ThreatsManager.Utilities.ThreatModelManager.Serialize(ThreatsManager.Interfaces.ObjectModel.IThreatModel)">
            <summary>
            Serializes a Threat Model as Json.
            </summary>
            <param name="model">Threat Model to be serialized.</param>
            <returns>Serialized Json of the Threat Model, as byte array.</returns>
        </member>
        <member name="M:ThreatsManager.Utilities.ThreatModelManager.GetLocation(ThreatsManager.Interfaces.ObjectModel.IThreatModel)">
            <summary>
            Get the location of a known Threat Model.
            </summary>
            <param name="model">Threat Model for which to get the location.</param>
            <returns>Location of the Threat Model.</returns>
        </member>
        <member name="M:ThreatsManager.Utilities.ThreatModelManager.SetLocation(ThreatsManager.Interfaces.ObjectModel.IThreatModel,System.String)">
            <summary>
            Sets the location of a known Threat Model.
            </summary>
            <param name="model">Threat Model for which to set the location.</param>
            <param name="location">Location of the Threat Model.</param>
            <remarks>If <paramref name="location"/> is <code>null</code>,
            then the stored location for the Threat Model is forgot.</remarks>
        </member>
        <member name="T:ThreatsManager.Utilities.Training.Lesson">
            <summary>
            Training Lesson.
            </summary>
        </member>
        <member name="F:ThreatsManager.Utilities.Training.Lesson.Id">
            <summary>
            Identifier of the lesson.
            </summary>
            <remarks>It must be unique for the Section.</remarks>
        </member>
        <member name="F:ThreatsManager.Utilities.Training.Lesson.Name">
            <summary>
            Name of the topic.
            </summary>
        </member>
        <member name="F:ThreatsManager.Utilities.Training.Lesson.Description">
            <summary>
            Description of the topic.
            </summary>
        </member>
        <member name="F:ThreatsManager.Utilities.Training.Lesson.Tags">
            <summary>
            Tags associated to the topic.
            </summary>
        </member>
        <member name="T:ThreatsManager.Utilities.Training.LessonInfo">
            <summary>
            Information about a Lesson.
            </summary>
        </member>
        <member name="M:ThreatsManager.Utilities.Training.LessonInfo.#ctor(System.String,System.String,System.String,ThreatsManager.Utilities.Training.Lesson)">
            <summary>
            Constructor.
            </summary>
            <param name="jsonUrl">Base Url of the training.</param>
            <param name="prefix">Prefix to be adopted to perform the search.</param>
            <param name="topic">Topic containing the lesson.</param>
            <param name="lesson">Lesson definition.</param>
        </member>
        <member name="P:ThreatsManager.Utilities.Training.LessonInfo.Url">
            <summary>
            Url of the entry point.
            </summary>
        </member>
        <member name="P:ThreatsManager.Utilities.Training.LessonInfo.Topic">
            <summary>
            Topic for the lesson.
            </summary>
        </member>
        <member name="P:ThreatsManager.Utilities.Training.LessonInfo.Name">
            <summary>
            Name of the training.
            </summary>
        </member>
        <member name="P:ThreatsManager.Utilities.Training.LessonInfo.Description">
            <summary>
            Description of the training.
            </summary>
        </member>
        <member name="P:ThreatsManager.Utilities.Training.LessonInfo.Tags">
            <summary>
            Tags associated to the Training.
            </summary>
        </member>
        <member name="M:ThreatsManager.Utilities.Training.LessonInfo.HasTag(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Checks if the Training Info has at least a Tag among the specified list.
            </summary>
            <param name="tags">List of desired tags.</param>
            <returns>True if at least a tag is present, false otherwise.</returns>
        </member>
        <member name="T:ThreatsManager.Utilities.Training.Section">
            <summary>
            Training Section.
            </summary>
            <remarks>Describes a Training Level.</remarks>
        </member>
        <member name="F:ThreatsManager.Utilities.Training.Section.SectionType">
            <summary>
            Training Level.
            </summary>
        </member>
        <member name="F:ThreatsManager.Utilities.Training.Section.Prefix">
            <summary>
            Prefix for the items.
            </summary>
            <remarks>This is optional.</remarks>
        </member>
        <member name="F:ThreatsManager.Utilities.Training.Section.Topics">
            <summary>
            List of topics.
            </summary>
            <remarks>Each topic represents a single lesson.</remarks>
        </member>
        <member name="T:ThreatsManager.Utilities.Training.Topic">
            <summary>
            Training Topic, which is a container of Lessons.
            </summary>
        </member>
        <member name="F:ThreatsManager.Utilities.Training.Topic.Name">
            <summary>
            Name of the topic.
            </summary>
        </member>
        <member name="F:ThreatsManager.Utilities.Training.Topic.Lessons">
            <summary>
            Lessons associated to the topic.
            </summary>
        </member>
        <member name="T:ThreatsManager.Utilities.Training.TrainingExtensions">
            <summary>
            Training specific extensions.
            </summary>
        </member>
        <member name="M:ThreatsManager.Utilities.Training.TrainingExtensions.GetLevelImage(ThreatsManager.Utilities.Training.TrainingLevel,ThreatsManager.Interfaces.ImageSize)">
            <summary>
            Calculate the image for the Level.
            </summary>
            <param name="level">Level for which the image must be returned.</param>
            <param name="size">Size of the image.</param>
            <returns>Bitmap with the image corresponding to the training level.</returns>
        </member>
        <member name="T:ThreatsManager.Utilities.Training.TrainingLevel">
            <summary>
            Type of Training Sections
            </summary>
        </member>
        <member name="F:ThreatsManager.Utilities.Training.TrainingLevel.Introductive">
            <summary>
            Introductive Training.
            </summary>
        </member>
        <member name="F:ThreatsManager.Utilities.Training.TrainingLevel.Advanced">
            <summary>
            Advanced Training.
            </summary>
        </member>
        <member name="F:ThreatsManager.Utilities.Training.TrainingLevel.Expert">
            <summary>
            Expert Training.
            </summary>
        </member>
        <member name="T:ThreatsManager.Utilities.Training.TrainingPillsAttribute">
            <summary>
            Attribute to be applied to the Assembly to specify where Training Pills for the implemented Extensions can be found. 
            </summary>
        </member>
        <member name="M:ThreatsManager.Utilities.Training.TrainingPillsAttribute.#ctor(System.String)">
            <summary>
            Constructor to specify where the Training Pills for the implemented Extensions are uploaded.
            </summary>
            <param name="baseUrl">Url containing the Training Pills.</param>
        </member>
        <member name="P:ThreatsManager.Utilities.Training.TrainingPillsAttribute.BaseUrl">
            <summary>
            Url containing the Training Pills.
            </summary>
        </member>
        <member name="T:ThreatsManager.Utilities.Training.TrainingPillsManager">
            <summary>
            Training Pills Manager.
            </summary>
            <remarks>In implements the Singleton pattern.</remarks>
        </member>
        <member name="P:ThreatsManager.Utilities.Training.TrainingPillsManager.Instance">
            <summary>
            Returns the unique instance of the Training Pills Manager.
            </summary>
        </member>
        <member name="M:ThreatsManager.Utilities.Training.TrainingPillsManager.Add(System.Reflection.Assembly)">
            <summary>
            Add the Training Pills source related to the Assembly.
            </summary>
            <param name="assembly">Assembly to be analyzed.</param>
        </member>
        <member name="M:ThreatsManager.Utilities.Training.TrainingPillsManager.Add(System.String)">
            <summary>
            Add the Training Pills source from the specified base url.
            </summary>
            <param name="baseUrl"></param>
        </member>
        <member name="P:ThreatsManager.Utilities.Training.TrainingPillsManager.Tags">
            <summary>
            Get the list of known tags, ordered alphabetically.
            </summary>
        </member>
        <member name="P:ThreatsManager.Utilities.Training.TrainingPillsManager.SupportedLevels">
            <summary>
            Supported levels.
            </summary>
        </member>
        <member name="M:ThreatsManager.Utilities.Training.TrainingPillsManager.GetLessons(ThreatsManager.Utilities.Training.TrainingLevel,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Get the lessons for a specific level.
            </summary>
            <param name="level">Level of the training.</param>
            <param name="requiredTags">Required tags.</param>
            <returns>List of Lessons for the given level and with at least one of the searched tags, if specified.</returns>
        </member>
        <member name="M:ThreatsManager.Utilities.Training.TrainingPillsManager.GetLessons(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Get the lessons.
            </summary>
            <param name="requiredTags">Required tags.</param>
            <returns>List of Lessons with at least one of the searched tags, if specified.</returns>
        </member>
        <member name="T:ThreatsManager.Utilities.Training.TrainingsDefinition">
            <summary>
            Definition of trainings.
            </summary>
        </member>
        <member name="F:ThreatsManager.Utilities.Training.TrainingsDefinition.Sections">
            <summary>
            Sections defined. Each section describes a training level.
            </summary>
        </member>
        <member name="F:ThreatsManager.Utilities.UserName.ExtendedNameFormat.NameUnknown">
            <summary>
            An unknown name type.
            </summary>
        </member>
        <member name="F:ThreatsManager.Utilities.UserName.ExtendedNameFormat.NameFullyQualifiedDN">
            <summary>
            The fully qualified distinguished name
            (for example, CN=Jeff Smith,OU=Users,DC=Engineering,DC=Microsoft,DC=Com).
            </summary>
        </member>
        <member name="F:ThreatsManager.Utilities.UserName.ExtendedNameFormat.NameSamCompatible">
            <summary>
            A legacy account name (for example, Engineering\JSmith).
            The domain-only version includes trailing backslashes (\\).
            </summary>
        </member>
        <member name="F:ThreatsManager.Utilities.UserName.ExtendedNameFormat.NameDisplay">
            <summary>
            A "friendly" display name (for example, Jeff Smith).
            The display name is not necessarily the defining relative distinguished name (RDN).
            </summary>
        </member>
        <member name="F:ThreatsManager.Utilities.UserName.ExtendedNameFormat.NameUniqueId">
            <summary>
            A GUID string that the IIDFromString function returns
            (for example, {4fa050f0-f561-11cf-bdd9-00aa003a77b6}).
            </summary>
        </member>
        <member name="F:ThreatsManager.Utilities.UserName.ExtendedNameFormat.NameCanonical">
            <summary>
            The complete canonical name (for example, engineering.microsoft.com/software/someone).
            The domain-only version includes a trailing forward slash (/).
            </summary>
        </member>
        <member name="F:ThreatsManager.Utilities.UserName.ExtendedNameFormat.NameUserPrincipal">
            <summary>
            The user principal name (for example, someone@example.com).
            </summary>
        </member>
        <member name="F:ThreatsManager.Utilities.UserName.ExtendedNameFormat.NameCanonicalEx">
            <summary>
            The same as NameCanonical except that the rightmost forward slash (/)
            is replaced with a new line character (\n), even in a domain-only case
            (for example, engineering.microsoft.com/software\nJSmith).
            </summary>
        </member>
        <member name="F:ThreatsManager.Utilities.UserName.ExtendedNameFormat.NameServicePrincipal">
            <summary>
            The generalized service principal name
            (for example, www/www.microsoft.com@microsoft.com).
            </summary>
        </member>
        <member name="F:ThreatsManager.Utilities.UserName.ExtendedNameFormat.NameDnsDomain">
            <summary>
            The DNS domain name followed by a backward-slash and the SAM user name.
            </summary>
        </member>
    </members>
</doc>
